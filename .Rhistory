test <- read.csv("test.csv")
train <- read.csv("train.csv")
library (tidyverse)
str(train)
colSums(sapply(train, is.na))
dataset.combined <- rbind(within(train, rm('Id','SalePrice')), within(test, rm('Id')))
library (tidyverse)
library (corrplot)
install.packages(corrplot)
install.packages("corrplot")
dataset.combined[is.na]
View(test)
dataset.combined[is.na(dataset.combined$Alley)]
View(dataset.combined)
View(dataset.combined)
View(dataset.combined)
library (tidyverse)
library (corrplot)
install.packages(corrplot)
install.packages('corrplot')
install.packages("corrplot")
test
df_train = train
df_test = test
df_train$Id = NULL
df_test$Id = NULL
df_train$Alley=NULL
df_train$PoolQC=NULL
df_train$Fence=NULL
df_train$MiscFeature=NULL
df_test$Alley=NULL
df_test$PoolQC=NULL
df_test$Fence=NULL
df_test$MiscFeature=NULL
for(i in 1:ncol(df_train)){
if (class(df_train[,i]) == "factor") {
df_train[,i] <- as.numeric(as.factor(df_train[,i]))
}
}
for(i in 1:ncol(df_test)){
if (class(df_test[,i]) == "factor") {
df_test[,i] <- as.numeric(as.factor(df_test[,i]))
}
}
for(i in 1:ncol(df_train)){
if (sum(is.na(df_train[,i])) > 0) {
df_train[i][is.na(df_train[i])] <- round(mean(df_train[,i], na.rm = TRUE))
}
}
for(i in 1:ncol(df_test)){
if (sum(is.na(df_test[,i])) > 0) {
df_test[i][is.na(df_test[i])] <- round(mean(df_test[,i], na.rm = TRUE))
}
}
x=cor(df_train[,unlist(lapply(df_train, is.numeric))])
corrplot(x, type="upper", order="hclust", method="circle",tl.cex = 0.4)
x=model.matrix(SalePrice~.-1,data=df_train)
y=df_train$SalePrice
test <- read.csv("test.csv")
train <- read.csv("train.csv")
?lm
library (tidyverse)
library (corrplot)
test <- read.csv("test.csv")
train <- read.csv("train.csv")
colSums(sapply(train, is.na))
sort(colSums(sapply(train, is.na)))
sort(colSums(sapply(train, is.na)), reverse = TRUE)
?sort
sort(colSums(sapply(train, is.na)), decreasing =  TRUE)
View(test)
View(test)
View(test)
#sort(colSums(sapply(train, is.na)), decreasing =  TRUE)
if ( colSums(sapply(train, is.na) > 1) {
nrow(test$Street)
nrow(test$OverallQual)
colMeans(is.na(train))
apply(x, 2, function(col)sum(is.na(col))/length(col))
apply(train, 2, function(col)sum(is.na(col))/length(col))
sort(colMeans(is.na(train)), decreasing = True)
sort(colMeans(is.na(train)), decreasing = TRUE)
sort(colSums(sapply(train, is.na)), decreasing =  TRUE)
sort(colMeans(is.na(train)), decreasing = TRUE)
cl_train = train
cl_test = test
cl_train$PoolQC = NULL
cl_train$MiscFeature = NULL
cl_train$Alley = NULL
cl_train$Fence = NULL
cl_train$FireplaceQu= NULL
cl_train$LotFrontage = NULL
cl_test$PoolQC = NULL
cl_test$MiscFeature = NULL
cl_test$Alley = NULL
cl_test$Fence = NULL
cl_test$FireplaceQu= NULL
cl_test$LotFrontage = NULL
for(i in 1:ncol(cl_train)){
if (class(cl_train[,i]) == "factor") {
cl_train[,i] <- as.numeric(as.factor(cl_train[,i]))
}
}
for(i in 1:ncol(cl_test)){
if (class(cl_test[,i]) == "factor") {
cl_test[,i] <- as.numeric(as.factor(cl_test[,i]))
}
}
for(i in 1:ncol(cl_train)){
if (sum(is.na(cl_train[,i])) > 0) {
cl_train[i][is.na(cl_train[i])] <- round(mean(cl_train[,i], na.rm = TRUE))
}
}
for(i in 1:ncol(cl_test)){
if (sum(is.na(cl_test[,i])) > 0) {
cl_test[i][is.na(cl_test[i])] <- round(mean(cl_test[,i], na.rm = TRUE))
}
}
dfnew <- data.frame(cl_train$OverallQual, cl_train$GrLivArea, cl_train$GarageCars, cl_train$GarageArea,
cl_train$TotalBsmtSF, cl_train$X1stFlrSF, cl_train$FullBath, cl_train$TotRmsAbvGrd,
cl_train$YearBuilt)
dfnew <- data.frame(cl_train$OverallQual, cl_train$GrLivArea, cl_train$GarageCars, cl_train$GarageArea,
cl_train$TotalBsmtSF, cl_train$X1stFlrSF, cl_train$FullBath, cl_train$TotRmsAbvGrd,
cl_train$YearBuilt)
install.packages("xgboost")
simplemodel <- lm(train$SalePrice ~ OverallQual + Neighborhood + LogGrLivArea + ExterQual + KitchenQual + Age + GarageCars + TotalBsmtSF + X1stFlrSF + GarageArea, data = cl_train[1:nrow(tr),])
simplemodel <- lm(train$SalePrice ~ OverallQual + Neighborhood + LogGrLivArea + ExterQual + KitchenQual + Age + GarageCars + TotalBsmtSF + X1stFlrSF + GarageArea, data = cl_train[1:nrow(cl_train),])
simplemodel <- lm(train$SalePrice ~ OverallQual + Neighborhood + GrLivArea + ExterQual + KitchenQual + Age + GarageCars + TotalBsmtSF + X1stFlrSF + GarageArea, data = cl_train[1:nrow(cl_train),])
simplemodel <- lm(train$SalePrice ~ OverallQual + Neighborhood + GrLivArea + ExterQual + KitchenQual  + GarageCars + TotalBsmtSF + X1stFlrSF + GarageArea, data = cl_train[1:nrow(cl_train),])
summary(simplemodel)
#LogPrice.test <- predict(simplemodel, newdata = features[(nrow(tr)+1):nrow(features),])
Price.test <- predict(simplemodel, newdata = cl_train[(nrow(cl_train)+1):nrow(cl_train),])
