?recode
library (tidyverse)
library (corrplot)
library(tidyr)
library (tidyverse)
library (corrplot)
library(tidyr)
test <- read.csv("test.csv")
train <- read.csv("train.csv")
hist(train$SalePrice)
train$LogSalePrice <- log(train$SalePrice)
hist(train$LogSalePrice)
train[train$GrLivArea>4000&train$SalePrice<2e+05,]$GrLivArea <- mean(train$GrLivArea)%>%as.numeric
train[train$X1stFlrSF>4000,]$X1stFlrSF <- mean(train$X1stFlrSF)%>%as.numeric
train[train$LotArea>100000,]$LotArea <- mean(train$LotArea)%>%as.numeric
ggplot(train,aes(y=SalePrice,x=GrLivAreea))+ggtitle("plots")+geom_point()
ggplot(train,aes(y=SalePrice,x=GrLivArea))+ggtitle("plots")+geom_point()
ggplot(train,aes(y=SalePrice,x=X1stFlrSF))+ggtitle("")+geom_point()
ggplot(train,aes(y=SalePrice,x=LotArea))+ggtitle("")+geom_point()
sort(colSums(sapply(train, is.na)), decreasing =  TRUE)
test$SalePrice <- as.numeric(0)
test$LogSalePrice <- as.numeric(0)
dsFull <- rbind(train,test)
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
dsFull$LotFrontage[is.na(dsFull$LotFrontage)] <- mean(dsFull$LotFrontage)
dsFull$MasVnrArea[is.na(dsFull$MasVnrArea)] <- 0
dsFull$GarageYrBlt[is.na(dsFull$GarageYrBlt)] <- 0
dsFull$BsmtFullBath[is.na(dsFull$BsmtFullBath)] <- 0
dsFull$BsmtHalfBath[is.na(dsFull$BsmtHalfBath)] <- 0
dsFull$BsmtFinSF1[is.na(dsFull$BsmtFinSF1)] <- 0
dsFull$BsmtFinSF2[is.na(dsFull$BsmtFinSF2)] <- 0
dsFull$BsmtUnfSF[is.na(dsFull$BsmtUnfSF)] <- 0
dsFull$TotalBsmtSF[is.na(dsFull$TotalBsmtSF)] <- 0
dsFull$GarageCars[is.na(dsFull$GarageCars)] <- 0
dsFull$GarageArea[is.na(dsFull$GarageArea)] <- 0
dsFull$PoolQC<- recode(dsFull$PoolQC,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$Alley<- recode(dsFull$Alley,"None"=0,"Grvl"=1,"Pave"=2)
dsFull$Fence<- recode(dsFull$Fence,"None"=0,"MnWw"=1,"GdWo"=2,"MnPrv"=3,"GdPrv"=4)
dsFull$FireplaceQu<- recode(dsFull$FireplaceQu,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageFinish<- recode(dsFull$GarageFinish,"None"=0,"Unf"=1,"RFn"=2,"Fin"=3)
dsFull$GarageQual<- recode(dsFull$GarageQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageCond<- recode(dsFull$GarageCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageType<- recode(dsFull$GarageType,"None"=0,"2Types"=1,"Attchd"=2,"Basment"=3,"BuiltIn"=4,"CarPort"=5, "Detchd" = 6)
dsFull$BsmtCond<- recode(dsFull$BsmtCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$BsmtExposure<- recode(dsFull$BsmtExposure,"None"=0,"No"=1,"Mn"=2,"Av"=3,"Gd"=4)
dsFull$BsmtQual<- recode(dsFull$BsmtQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$ExterQual<- recode(dsFull$ExterQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$ExterCond<- recode(dsFull$ExterCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$BsmtFinType1<- recode(dsFull$BsmtFinType1,"None"=0,"Unf"=1,"LwQ"=2,"Rec"=3,"BLQ"=4,"ALQ"=5,"GLQ"=6)
dsFull$BsmtFinType2<- recode(dsFull$BsmtFinType2,"None"=0,"Unf"=1,"LwQ"=2,"Rec"=3,"BLQ"=4,"ALQ"=5,"GLQ"=6)
dsFull$HeatingQC<- recode(dsFull$HeatingQC,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$KitchenQual<- recode(dsFull$KitchenQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$Functional<- recode(dsFull$Functional,"None"=0,"Sev"=1,"Maj2"=2,"Maj1"=3,"Mod"=4,"Min2"=5,"Min1"=6,"Typ"=7)
#Adding an important feature - Total area of basement
dsFull$TotalSF = dsFull$TotalBsmtSF + dsFull$X1stFlrSF + dsFull$X2ndFlrSF
train.2 <- dsFull[1:1460,]
test.2 <- dsFull[1461:2919,]
LR <-lm(formula = SalePrice ~., data = train.2)
LR <-lm(formula = SalePrice ~., data = train.2)
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0))
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0
}
}
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
train.2 <- dsFull[1:1460,]
test.2 <- dsFull[1461:2919,]
LR <-lm(formula = SalePrice ~., data = train.2)
LR <-lm(formula = SalePrice ~. -MiscFeature , data = train.2)
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType, data = train.2)
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType - MsZoning, data = train.2)
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType - MSZoning, data = train.2)
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0
}
}
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
dsFull$PoolQC<- recode(dsFull$PoolQC,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$Alley<- recode(dsFull$Alley,"None"=0,"Grvl"=1,"Pave"=2)
dsFull$Fence<- recode(dsFull$Fence,"None"=0,"MnWw"=1,"GdWo"=2,"MnPrv"=3,"GdPrv"=4)
dsFull$FireplaceQu<- recode(dsFull$FireplaceQu,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageFinish<- recode(dsFull$GarageFinish,"None"=0,"Unf"=1,"RFn"=2,"Fin"=3)
dsFull$GarageQual<- recode(dsFull$GarageQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageCond<- recode(dsFull$GarageCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$GarageType<- recode(dsFull$GarageType,"None"=0,"2Types"=1,"Attchd"=2,"Basment"=3,"BuiltIn"=4,"CarPort"=5, "Detchd" = 6)
dsFull$BsmtCond<- recode(dsFull$BsmtCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$BsmtExposure<- recode(dsFull$BsmtExposure,"None"=0,"No"=1,"Mn"=2,"Av"=3,"Gd"=4)
dsFull$BsmtQual<- recode(dsFull$BsmtQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$ExterQual<- recode(dsFull$ExterQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$ExterCond<- recode(dsFull$ExterCond,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$BsmtFinType1<- recode(dsFull$BsmtFinType1,"None"=0,"Unf"=1,"LwQ"=2,"Rec"=3,"BLQ"=4,"ALQ"=5,"GLQ"=6)
dsFull$BsmtFinType2<- recode(dsFull$BsmtFinType2,"None"=0,"Unf"=1,"LwQ"=2,"Rec"=3,"BLQ"=4,"ALQ"=5,"GLQ"=6)
dsFull$HeatingQC<- recode(dsFull$HeatingQC,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$KitchenQual<- recode(dsFull$KitchenQual,"None"=0,"Po"=1,"Fa"=2,"TA"=3,"Gd"=4,"Ex"=5)
dsFull$Functional<- recode(dsFull$Functional,"None"=0,"Sev"=1,"Maj2"=2,"Maj1"=3,"Mod"=4,"Min2"=5,"Min1"=6,"Typ"=7)
dsFull$MSZoning<- recode(dsFull$MSZoning,"None"=0,"A"=1,"C"=2,"FV"=3,"I"=4,"RH"=5,"RL"=6,"RP"=7, "RM" = 8)
#Adding an important feature - Total area of basement
dsFull$TotalSF = dsFull$TotalBsmtSF + dsFull$X1stFlrSF + dsFull$X2ndFlrSF
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0
}
}
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
dsFull$Utilities[is.na(dsFull$Utilities)] <- "AllPub"
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0
}
}
dsFull$MiscFeature<- recode(dsFull$MiscFeature,"None"=0,"Elev"=1,"Gar2"=2,"Othr"=3,"Shed"=4,"TenC"=5)
dsFull$MasVnrType[is.na(dsFull$ManVnrType)] <- "None"
dsFull$Utilities[is.na(dsFull$Utilities)] <- "AllPub"
dsFull$Exterior1st[is.na(dsFull$Exterior1st)] <- "VinylSd"
dsFull$Exterior2nd[is.na(dsFull$Exterior2nd)] <- "VinylSd"
dsFull$Electrical[is.na(dsFull$Electrical)] <- "SBrkr"
dsFull$SaleType[is.na(dsFull$SaleType)] <- "WD"
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
for(i in 1:ncol(dsFull)){
if (sum(is.na(dsFull[,i])) > 0) {
dsFull[i][is.na(dsFull[i])] <- 0
}
}
sort(colSums(sapply(dsFull, is.na)), decreasing =  TRUE)
train.2 <- dsFull[1:1460,]
test.2 <- dsFull[1461:2919,]
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType - MSZoning, data = train.2)
summary(LR)
predictionLr<- predict(LR,validation, type="response")
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType - MSZoning, data = train.2)
summary(LR)
predictionLr<- predict(LR, type="response")
rmse(train.2$SalePrice,predictionLR)
LR <-lm(formula = SalePrice ~. -MiscFeature -MasVnrType - MSZoning, data = train.2)
summary(LR)
predictionLr<- predict(LR, type="response")
rmse(train.2$SalePrice,predictionLr)
LR <-lm(formula = SalePrice ~., data = train.2)
summary(LR)
predictionLr<- predict(LR, type="response")
rmse(train.2$SalePrice,predictionLr)
predictionLr
LR <-lm(formula = SalePrice ~., data = train.2)
summary(LR)
predictionLr<- predict(LR,train.2$SalePrice type="response")
LR <-lm(formula = SalePrice ~., data = train.2)
summary(LR)
predictionLr<- predict(LR,train.2$SalePrice, type="response")
?predict
LR <-lm(formula = SalePrice ~., data = train.2)
summary(LR)
predictionLr<- predict(LR,test, type="response")
predictionLr<- predict(LR,test.2, type="response")
rmse(train.2$SalePrice,predictionLr)
predictionLr<- predict(LR, type="response")
rmse(train.2$SalePrice,predictionLr)
predictionLr<- predict(LR,train.2$SalePrice, type="response")
predictionLr<- predict(LR,train.2, type="response")
rmse(train.2$SalePrice,predictionLr)
install.packages("caret")
trainF <- dsFull[1:1460,]
testF <- dsFull[1461:2919,]
in_train <- createDataPartition(trainF$SalePrice,p=0.7,list=F)
library(caret)
trainF <- dsFull[1:1460,]
testF <- dsFull[1461:2919,]
in_train <- createDataPartition(trainF$SalePrice,p=0.7,list=F)
train3 <- trainF[in_train,]
validation <- trainFcr[-in_train,]
library(caret)
trainF <- dsFull[1:1460,]
testF <- dsFull[1461:2919,]
in_train <- createDataPartition(trainF$SalePrice,p=0.7,list=F)
train3 <- trainF[in_train,]
validation <- trainF[-in_train,]
lr <-lm(formula = SalePrice ~., data = train3)
lr <-lm(formula = SalePrice ~., data = train3)
View(test.2)
sort(colSums(sapply(train.2, is.na)), decreasing =  TRUE)
LR <-lm(formula = SalePrice ~. -LogSalePrice - ManVnrType, data = train.2)
LR <-lm(formula = SalePrice ~. -LogSalePrice - MasVnrType, data = train.2)
summary(LR)
predictionLr<- predict(LR,test.2, type="response")
rmse(train.2$SalePrice,predictionLr)
library (tidyverse)
library (corrplot)
library(tidyr)
library(Metrics)
rmse(train.2$SalePrice,predictionLr)
LR <-lm(formula = LogSalePrice ~. -SalePrice - MasVnrType, data = train.2)
summary(LR)
predictionLr<- predict(LR,test.2, type="response")
rmse(train.2$SalePrice,predictionLr)
install.packages("randomForest")
library (tidyverse)
library (corrplot)
library(tidyr)
library(Metrics)
library(randomForest)
randomForestTest <- randomForest(formula = LogSalePrice ~. -SalePrice - MasVnrType, data = train.2)
randomForestTest <- randomForest(formula = SalePrice ~. -logSalePrice - MasVnrType, data = train.2)
randomForestTest <- randomForest(formula = SalePrice ~. -LogSalePrice - MasVnrType, data = train.2)
sort(colSums(sapply(train.2, is.na)), decreasing =  TRUE)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType, data = train.2)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType, data = train.2, na.action = na.exclude)
prediction.RandomForest <- predict(randomForestTest, newdata= test.2)
rmse(train2$SalePrice,prediction.RandomForest)
rmse(train.2$SalePrice,prediction.RandomForest)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType, data = train.2, na.action = na.exclude)
prediction.RandomForest <- predict(randomForestTest, newdata= test.2)
rmse(train.2$SalePrice,prediction.RandomForest)
res <- cbind(c(1461:(1461 + length(prediction.RandomForest))), prediction.RandomForest)
colnames(res)<-c('Id', 'SalePrice')
write.csv(res, 'submissionRandomForest.csv', row.names = FALSE)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType -LogSalePrice, data = train.2, na.action = na.exclude)
prediction.RandomForest <- predict(randomForestTest, newdata= test.2)
#rmse(train.2$SalePrice,prediction.RandomForest)
res <- cbind(c(1461:(1461 + length(prediction.RandomForest))), prediction.RandomForest)
colnames(res)<-c('Id', 'SalePrice')
write.csv(res, 'submissionRandomForest.csv', row.names = FALSE)
rmse(train$SalePrice,prediction.RandomForest)
rmse(train$SalePrice,predictionLr)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType -LogSalePrice, data = train.2, na.action = na.omit)
prediction.RandomForest <- predict(randomForestTest, newdata= test.2)
#rmse(train.2$SalePrice,prediction.RandomForest)
#stringsAsFactors is used here to be able later to convert non numerical to numerical
training.set <- read.csv("train.csv", stringsAsFactors=FALSE)
testing.set <- read.csv("test.csv", stringsAsFactors=FALSE)
head(training.set)
#this function convert all the data to numeric
handle_Non_Numerical_columns <- function(data){
#for each field or column
for (field in 1:NCOL(data)){
if (!is.numeric(data[1, field])){
allValues = c()
#creating a set of all the values of the column
#for each value in the field
for (value in data[, field]){
if ((!value %in% allValues) && !is.na(value)){
allValues = c(allValues, value)
}
}
#browse the column and substitute the values by their numerical corresponding
#for each value in the field
pos = 1
for (value in data[, field]){
#the function match returns the position of value in the list allValues
data[pos, field] = match(value, allValues)
pos = pos + 1
}
}
#convert the column in numeric
data[,field] = as.numeric(data[,field])
}
return(data)
}
training.set = handle_Non_Numerical_columns(training.set)
testing.set = handle_Non_Numerical_columns(testing.set)
head(training.set)
#this function replaces all NAs of the dataset by the mean or median of the coresponding field
Replacing.NAs <- function(data){
for (field in 1:NCOL(data)){
#compute the mean
field.mean <- median(data[,field], na.rm=TRUE)
#substitute all the NAs by the mean
data[is.na(data[,field]), field] <- field.mean
}
return(data)
}
training.set = Replacing.NAs(training.set)
testing.set = Replacing.NAs(testing.set)
head(training.set)
#training.set <- subset(training.set, select = -Id )
#testing.set <- subset(testing.set, select = -Id )
#select variables that be used for model
model_var <- c('SalePrice',
'OverallQual','OverallCond','YearBuilt','ExterCond',
'TotalBsmtSF','HeatingQC',
'CentralAir','GrLivArea','BedroomAbvGr','KitchenAbvGr',
'TotRmsAbvGrd','Fireplaces',
'GarageArea','OpenPorchSF','PoolArea',
'YrSold')
training.set <- training.set[, model_var]
training.set$LogSalePrice = log(training.set$SalePrice)
head(training.set)
#partition data for cross validation
set.seed(123)
#taking randomly 0.8(80%) of the observation for training the data and 20% for cross validating
train.index <- sample(c(1:dim(training.set)[1]), dim(training.set)[1]*0.8)
model_lin_train = training.set[train.index,]
model_lin_valid <- training.set[-train.index,]
model_lin_train <- subset(model_lin_train, select = -SalePrice)
linreg <- lm(LogSalePrice~., data = model_lin_train)
sm <- summary(linreg)
sm
library(forecast)
install.packages("forecast")
library(forecast)
SalePrice1 <- predict(linreg, newdata = model_lin_valid)
#SalePrice1 <- data.frame(SalePrice1)
#head(SalePrice1)
residuals <- model_lin_valid$LogSalePrice - SalePrice1
linreg_pred <- data.frame("Predicted" = SalePrice1, "Actual" = model_lin_valid$LogSalePrice, "Residual" = residuals)
View(accuracy(SalePrice1, model_lin_valid$LogSalePrice))
SalePrice2 <- predict(linreg, newdata = testing.set)
SalePrice <- exp(SalePrice2)
library(xgboost)
# load data
# fit model
bst <- xgboost(data = data.matrix(model_lin_train), label = model_lin_train$LogSalePrice, max.depth = 2, eta = 0.3, nround = 30, nthread = 2, objective = "reg:linear")
# predict
pred <- predict(bst, data.matrix(model_lin_valid))
residuals <- model_lin_valid$LogSalePrice - pred
xgb_pred <- data.frame("Predicted" = pred, "Actual" = model_lin_valid$LogSalePrice, "Residual" = residuals)
View(accuracy(pred, model_lin_valid$LogSalePrice))
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType -LogSalePrice, data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~.  -MasVnrType -LogSalePrice, data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~., data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~, data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~., data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~. -OverallQual, data = data.matrix(model_lin_train), na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~. -OverallQual, data = model_lin_train, na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~. , data = model_lin_train, na.action = na.omit)
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~. , data = model_lin_train, na.action = na.omit)
?randomForest
library(randomForest)
randomForestTest <- randomForest(formula = SalePrice ~. , data = model_lin_train)
#stringsAsFactors is used here to be able later to convert non numerical to numerical
training.set <- read.csv("train.csv", stringsAsFactors=FALSE)
testing.set <- read.csv("test.csv", stringsAsFactors=FALSE)
head(training.set)
#this function convert all the data to numeric
handle_Non_Numerical_columns <- function(data){
#for each field or column
for (field in 1:NCOL(data)){
if (!is.numeric(data[1, field])){
allValues = c()
#creating a set of all the values of the column
#for each value in the field
for (value in data[, field]){
if ((!value %in% allValues) && !is.na(value)){
allValues = c(allValues, value)
}
}
#browse the column and substitute the values by their numerical corresponding
#for each value in the field
pos = 1
for (value in data[, field]){
#the function match returns the position of value in the list allValues
data[pos, field] = match(value, allValues)
pos = pos + 1
}
}
#convert the column in numeric
data[,field] = as.numeric(data[,field])
}
return(data)
}
training.set = handle_Non_Numerical_columns(training.set)
testing.set = handle_Non_Numerical_columns(testing.set)
head(training.set)
#this function replaces all NAs of the dataset by the mean or median of the coresponding field
Replacing.NAs <- function(data){
for (field in 1:NCOL(data)){
#compute the mean
field.mean <- median(data[,field], na.rm=TRUE)
#substitute all the NAs by the mean
data[is.na(data[,field]), field] <- field.mean
}
return(data)
}
training.set = Replacing.NAs(training.set)
testing.set = Replacing.NAs(testing.set)
training.set.full = Replacing.NAs(training.set)
testing.set.full = Replacing.NAs(testing.set)
head(training.set)
#training.set <- subset(training.set, select = -Id )
#testing.set <- subset(testing.set, select = -Id )
#select variables that be used for model
model_var <- c('SalePrice',
'OverallQual','OverallCond','YearBuilt','ExterCond',
'TotalBsmtSF','HeatingQC',
'CentralAir','GrLivArea','BedroomAbvGr','KitchenAbvGr',
'TotRmsAbvGrd','Fireplaces',
'GarageArea','OpenPorchSF','PoolArea',
'YrSold')
training.set <- training.set[, model_var]
training.set$LogSalePrice = log(training.set$SalePrice)
head(training.set)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
?names
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ .,data=train.rf,ntree=500)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
names(test.rf) = names(testing.set)
names(train1) = names(training.set)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
names(test.rf) = names(testing.set)
names(train.rf) = names(training.set)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ .,data=train.rf,ntree=500)
View(train.rf)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ ,data=train.rf,ntree=500)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ .,data=train.rf,ntree=500)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ ., data=train.rf,ntree=500)
View(train.rf)
#stringsAsFactors is used here to be able later to convert non numerical to numerical
training.set <- read.csv("train.csv", stringsAsFactors=FALSE)
testing.set <- read.csv("test.csv", stringsAsFactors=FALSE)
head(training.set)
#this function convert all the data to numeric
handle_Non_Numerical_columns <- function(data){
#for each field or column
for (field in 1:NCOL(data)){
if (!is.numeric(data[1, field])){
allValues = c()
#creating a set of all the values of the column
#for each value in the field
for (value in data[, field]){
if ((!value %in% allValues) && !is.na(value)){
allValues = c(allValues, value)
}
}
#browse the column and substitute the values by their numerical corresponding
#for each value in the field
pos = 1
for (value in data[, field]){
#the function match returns the position of value in the list allValues
data[pos, field] = match(value, allValues)
pos = pos + 1
}
}
#convert the column in numeric
data[,field] = as.numeric(data[,field])
}
return(data)
}
training.set = handle_Non_Numerical_columns(training.set)
testing.set = handle_Non_Numerical_columns(testing.set)
head(training.set)
#this function replaces all NAs of the dataset by the mean or median of the coresponding field
Replacing.NAs <- function(data){
for (field in 1:NCOL(data)){
#compute the mean
field.mean <- median(data[,field], na.rm=TRUE)
#substitute all the NAs by the mean
data[is.na(data[,field]), field] <- field.mean
}
return(data)
}
training.set = Replacing.NAs(training.set)
testing.set = Replacing.NAs(testing.set)
training.set.full = Replacing.NAs(training.set)
testing.set.full = Replacing.NAs(testing.set)
head(training.set)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
names(test.rf) = names(testing.set)
names(train.rf) = names(training.set)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ ., data=train.rf,ntree=500)
plot(randomForestTest)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ ., data=train.rf,ntree=500)
FullData.set <- rbind(training.set.full[,-81],testing.set.full)
train.rf <- cbind(FullData.set[1:1460,],training.set.full[,81])
test.rf <- FullData.set[-(1:1460),-81]
names(test.rf) = names(testing.set)
names(train.rf) = names(training.set)
library(randomForest)
randomForestTest <- randomForest(SalePrice ~ ., data=train.rf,ntree=500)
plot(randomForestTest)
prediction.RandomForest <- predict(randomForestTest,test.rf,type="response")
submit.randomforest <- cbind(testing.set$Id,prediction.RandomForest)
write.table(submit.randomforest,file="submissionRF.csv",sep=",",
quote=FALSE,col.names=c("Id","SalePrice"),row.names=FALSE)
View(test.rf)
View(accuracy(prediction.RandomForest, model_lin_valid$LogSalePrice))
View(accuracy(prediction.RandomForest, model_lin_valid$SalePrice))
varImpPlot(randomForestTest,n.var = 10)
prediction.RandomForest <- predict(randomForestTest,test.rf,type="response")
submit.randomforest <- cbind(testing.rf$Id,prediction.RandomForest)
submit.randomforest <- cbind(test.rf$Id,prediction.RandomForest)
write.table(submit.randomforest,file="submissionRF.csv",sep=",",
quote=FALSE,col.names=c("Id","SalePrice"),row.names=FALSE)
